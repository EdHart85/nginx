# This configuration was develop with the help of Nginx documentation and several others sources that I found on the Internet.
# It should work for most simple enviroments or at least help you build your own configuration for different scenarios.
# Tested on Nginx 1.14.2 / Debian GNU/Linux 10 (buster)

# by Eduardo Hartmann (https://github.com/EdHart85)


# NGINX user
user www-data;

# PID file
pid /run/nginx.pid;

# The number of NGINX worker processes (the default is 1). In most cases,
# running one worker process per CPU core works well, and we recommend
# setting this directive to auto to achieve that. There are times when
# you may want to increase this number, such as when the worker processes
# have to do a lot of disk I/O.
worker_processes auto;

# Changes the limit on the maximum number of open files (RLIMIT_NOFILE) 
# for worker processes. Used to increase the limit without restarting the main process. 
worker_rlimit_nofile 65535;

# Enable only if modules are necessary.
#include /etc/nginx/modules-enabled/*.conf;

events {
	# The maximum number of connections that each worker process can handle simultaneously.
	# The default is 512, but most systems have enough resources to support a larger number.
	# The appropriate setting depends on the size of the server and the nature of the traffic,
	# and can be discovered through testing.
	worker_connections 65535;

	# A worker process will accept all new connections at a time
	multi_accept on;

}

http {
    # allows to transfer data from a file descriptor to another directly in kernel space saving lots of resources
    sendfile on;

    # optimizes the amount of data sent at once
    tcp_nopush on;

    # forces a socket to send the data in its buffer, whatever the packet size, as soon as it’s available
    tcp_nodelay on;

    # The number of requests a client can make over a single keepalive connection
    keepalive_requests 100;

    # The first parameter assigns the timeout for keep-alive connections with the client. The server will close connections after this time.
    # The optional second parameter assigns the time value in the header Keep-Alive: timeout=time of the response.
    # This header can convince some browsers to close the connection, so that the server does not have to.
    # Without this parameter, nginx does not send a Keep-Alive header (though this is not what makes a connection “keep-alive”).
    keepalive_timeout 5 5;

    # Directive sets the read timeout for the request body from client. The timeout is set only if a body is not get in one readstep.
    # If after this time the client send nothing, nginx returns error “Request time out” (408). The default is 60.
    client_body_timeout   10;

    # Directive assigns timeout with reading of the title of the request of client.
    # The timeout is set only if a header is not get in one readstep.
    # If after this time the client send nothing, nginx returns error “Request time out” (408).
    client_header_timeout 10;

    # Directive assigns response timeout to client. Timeout is established not on entire transfer of answer,
    # but only between two operations of reading, if after this time client will take nothing, then nginx is shutting down the connection.
    send_timeout          10;

    types_hash_max_size 2048;

    include mime.types;
    default_type application/octet-stream;

    # Logging Settings
    log_format combined_ssl '$remote_addr – $remote_user [$time_local] '
							'$ssl_protocol/$ssl_cipher '
							'"$request" $status $body_bytes_sent '
							'"$http_referer" "$http_user_agent"';

    # Default logging configuration
    access_log /var/log/nginx/access.log combined_ssl;
    error_log /var/log/nginx/error.log;

    # Don’t send the nginx version number in error pages and Server header
    server_tokens off;

    # SSL
	# How long a SSL session can be reused
    ssl_session_timeout    1d;
	
	# A shared SSL cache between all workers
	# 1MB can store about 4000 sessions. Adjust it according to your needs
    ssl_session_cache      shared:SSL:10m;
	
	# Disables session resumption through TLS session tickets. 
    ssl_session_tickets    off;

    # Diffie-Hellman parameter for DHE ciphersuites
    ssl_dhparam            /etc/nginx/dhparam.pem;

    # Mozilla SSL Intermediate configuration
	# https://ssl-config.mozilla.org
    ssl_protocols          TLSv1.2 TLSv1.3;
    ssl_ciphers            ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

	# Use server order ciphers for improved security
	# ssl_prefer_server_ciphers   on;

	# SSL OCSP Stapling
	# Improve security by checking the revocation status of the certificates
	ssl_stapling on;
	ssl_stapling_verify on;
	resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid=60s;
	resolver_timeout 2s;

    # Buffer overflow attacks prevention

    # The directive specifies the client request body buffer size.
    client_body_buffer_size 2k;

    # Directive sets the headerbuffer size for the request header from client.
    client_header_buffer_size 2k;

    # Directive assigns the maximum accepted body size of client request, indicated by the line Content-Length in the header of request.
    # If size is greater the given one, then the client gets the error “Request Entity Too Large” (413).
    # Increase this when you are getting file uploads via the POST method.
    client_max_body_size 2k;

    # Directive assigns the maximum number and size of buffers for large headers to read from client request.
    # By default the size of one buffer is equal to the size of page, depending on platform this either 4K or 8K,
    # if at the end of working request connection converts to state keep-alive, then these buffers are freed.
    # 2x1k will accept 2kB data URI. This will also help combat bad bots and DoS attacks.
    large_client_header_buffers 2 1k;

    # Virtual Host Configs
    include /etc/nginx/sites-enabled/*;

}
