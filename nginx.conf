    # NGINX user
    user www-data;

    # PID file
    pid /run/nginx.pid;

    # The number of NGINX worker processes (the default is 1). In most cases,
    # running one worker process per CPU core works well, and we recommend
    # setting this directive to auto to achieve that. There are times when
    # you may want to increase this number, such as when the worker processes
    # have to do a lot of disk I/O.
    worker_processes auto;

    # Enable only if modules are necessary.
    #include /etc/nginx/modules-enabled/*.conf;

    events {
    # The maximum number of connections that each worker process can handle simultaneously.
    # The default is 512, but most systems have enough resources to support a larger number.
    # The appropriate setting depends on the size of the server and the nature of the traffic,
    # and can be discovered through testing.
    worker_connections 768;

    # A worker process will accept all new connections at a time
    #multi_accept on;

    # efficient method of connection processing
    use epoll;
    }

    http {
    # allows to transfer data from a file descriptor to another directly in kernel space saving lots of resources
    sendfile on;

    # optimizes the amount of data sent at once
    tcp_nopush on;

    # forces a socket to send the data in its buffer, whatever the packet size, as soon as it’s available
    tcp_nodelay on;

    # The number of requests a client can make over a single keepalive connection
    keepalive_requests 100;

    # The first parameter assigns the timeout for keep-alive connections with the client. The server will close connections after this time.
    # The optional second parameter assigns the time value in the header Keep-Alive: timeout=time of the response.
    # This header can convince some browsers to close the connection, so that the server does not have to.
    # Without this parameter, nginx does not send a Keep-Alive header (though this is not what makes a connection “keep-alive”).
    keepalive_timeout 5 5;

    # Directive sets the read timeout for the request body from client. The timeout is set only if a body is not get in one readstep.
    # If after this time the client send nothing, nginx returns error “Request time out” (408). The default is 60.
    client_body_timeout   10;

    # Directive assigns timeout with reading of the title of the request of client.
    # The timeout is set only if a header is not get in one readstep.
    # If after this time the client send nothing, nginx returns error “Request time out” (408).
    client_header_timeout 10;

    # Directive assigns response timeout to client. Timeout is established not on entire transfer of answer,
    # but only between two operations of reading, if after this time client will take nothing, then nginx is shutting down the connection.
    send_timeout          10;

    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Default SSL Settings
    ssl_protocols TLSv1.3 TLSv1.2
    ssl_prefer_server_ciphers on;

    # Logging Settings
    log_format combined_ssl ‘$remote_addr – $remote_user [$time_local] ‘
    ‘$ssl_protocol/$ssl_cipher ‘
    ‘”$request” $status $body_bytes_sent ‘
    ‘”$http_referer” “$http_user_agent”‘;

    # Default logging configuration
    access_log /var/log/nginx/access.log combined_ssl;
    error_log /var/log/nginx/error.log;

    # Gzip Settings
    gzip on;
    gzip_disable “msie6”;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 128 32k;
    gzip_http_version 1.1;
    gzip_min_length 1400;
    gzip_types text/html text/css application/json application/javascript application/xml application/xml+rss text/javascript;

    # don’t send the nginx version number in error pages and Server header
    server_tokens off;

    # config to don’t allow the browser to render the page inside an frame or iframe
    # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
    # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
    # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
    add_header X-Frame-Options SAMEORIGIN;

    # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
    # to disable content-type sniffing on some browsers.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    # currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
    # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
    # ‘soon’ on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
    add_header X-Content-Type-Options nosniff;

    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    # It’s usually enabled by default anyway, so the role of this header is to re-enable the filter for
    # this particular website if it was disabled by the user.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-XSS-Protection “1; mode=block”;

    # Buffer overflow attacks prevention

    # The directive specifies the client request body buffer size.
    client_body_buffer_size 2k;

    # Directive sets the headerbuffer size for the request header from client.
    client_header_buffer_size 2k;

    # Directive assigns the maximum accepted body size of client request, indicated by the line Content-Length in the header of request.
    # If size is greater the given one, then the client gets the error “Request Entity Too Large” (413).
    # Increase this when you are getting file uploads via the POST method.
    client_max_body_size 2k;

    # Directive assigns the maximum number and size of buffers for large headers to read from client request.
    # By default the size of one buffer is equal to the size of page, depending on platform this either 4K or 8K,
    # if at the end of working request connection converts to state keep-alive, then these buffers are freed.
    # 2x1k will accept 2kB data URI. This will also help combat bad bots and DoS attacks.
    large_client_header_buffers 2 1k;

    # Virtual Host Configs
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;

    }
