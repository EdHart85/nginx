# This configuration was develop with the help of Nginx documentation and several others sources that I found on the Internet.
# It should work for most simple enviroments or at least help you build your own configuration for different scenarios.
# Tested on Nginx 1.14.2 / Debian GNU/Linux 10 (buster)

# by Eduardo Hartmann (https://github.com/EdHart85/nginx)


# Redirect all http traffic to https
server {
	# Listen on HTTP default port
	listen 80;
	
	# Virtualhost name
	server_name www.example.com;
	
	# Redirect to HTTPS with code 301 (Moved Permanently)
	return 301 https://$host$request_uri;
}

server {
	# ---------- GENERAL SETTINGS ----------
	# Listen on HTTPS default port using SSL and enabling HTTP/2 protocol
	listen 443 ssl http2;
	
	# Virtualhost name
	server_name www.example.com;

	# Virtualhost root directory
	root /var/www/example;
	
	# Files that will be used as an index
	index index.php index.html index.htm;

	# Increase buffer size for reading client request body (default: 16k)
	client_body_buffer_size 128k;
	
	# Increase maximum allowed size of the client request body (default: 1M)
	client_max_body_size 45M;

	# ---------- ENCRYPTION ----------
	# If you don't have a SSL certificate of your own,
	# consider using Let's Encrypt: https://letsencrypt.org
	# Check the documentation for detailed information
	# http://nginx.org/en/docs/http/ngx_http_ssl_module.html
	# Nginx main configuration file (nginx.conf) contains
	# the default settings for this server but they can be
	# overwritten just by resetting them here if you need
	# some custom adjustament for this virtualhost
	
	# Your public key plus intermediate certificates
	ssl_certificate /etc/nginx/certs/example_chained.crt;
	
	# Your private key
	ssl_certificate_key /etc/nginx/certs/example.key;
	
	# Trusted CA certificates in the PEM format used to verify client certificates and OCSP
	ssl_trusted_certificate /etc/nginx/certs/ca_bundle_intermediate.crt;
        
	# SSL Diffie-Hellman Parameter
	# Use the following command to generate a Diffie-Hellman Parameter file
	# with a 2048 bits (strong key) on a Linux enviroment (it may take a long time!):
	# openssl dhparam -out /etc/nginx/certs/example_dhparam.pem 2048
	ssl_dhparam /etc/nginx/certs/example_dhparam.pem;

	# ---------- LOGGING ----------
	access_log /var/log/nginx/example_access.log combined_ssl;
	error_log /var/log/nginx/example_error.log;


	# ---------- CUSTOM ERROR PAGES ----------
	# Custom error pages - Client side errors
	# error_page 400 401 403 404 /custom_40x.html;
	# location = /custom_40x.html {
	#	root /var/www/errorpages;
	#	internal;
	#
	
	# Custom error pages - Server side errors
	# error_page 500 502 503 504 /custom_50x.html;
	# location = /custom_50x.html {
	# 	root /var/www/errorpages;
	#	internal;
	#}
	

	# ---------- ACCESS CONTROL ----------
	# Use this if you need to restrict access
	# for only some host/networks
	# allow   192.0.2.0/24;
	# deny the rest of the world
	# deny    all;

	
	# ---------- SECURITY ----------
	
	# General security settings suitable for almost all cases
	include security.conf;
	
	# ---------- MAIN LOCATION ----------
	location / {
	
		# GET and POST are the most common methods on the Internet (RFC 2616)
		# If a web server does not require the implementation of all available methods,
		# they should be disabled.
		limit_except GET HEAD POST { deny all; }
	
		# USE ONLY ONE OF THE FOLLOWING OPTIONS, ACCORDING TO YOUR NEEDS:
		
		# OPTION 1
		# Uncomment to following line if you need to take your system down for maintenance
		# return 503 $document_root/under_maintenance.html;

		# OPTION 2			
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
			
		# OPTION 3
		# If you need to use friendly URLs use the configuration
		# below instead
		# try_files $uri $uri/ /index.php;
		
		# OPTION 4
		# For Drupal >= 7, use the following
		# try_files $uri /index.php?$query_string;

	}
	
	# ---------- ADDITIONAL STANDARD CONFIGS ----------
	
	# General settings suitable for almost all cases
	include general.conf;
	
	# Drupal specific settings
    	# include drupal.conf;

	# ---------- PHP-FPM ----------
	location ~ [^/]\.php(/|$) {
		# Check this out to better understand the following parameters:
		# https://www.nginx.com/resources/wiki/start/topics/examples/phpfcgi/
				
		# Check whether the *.php does indeed exist to prevent Nginx to feeding PHP-FPM non php script file
		# For instance, if a request is made for /forum/avatar/1232.jpg/file.php which does not exist but 
		# if /forum/avatar/1232.jpg does, the PHP interpreter will process /forum/avatar/1232.jpg instead.
		# If this contains embedded PHP code, this code will be executed accordingly.
		location ~ \..*/.*\.php$ {return 404;}
	
		# Mitigate https://httpoxy.org/ vulnerabilities
		fastcgi_param HTTP_PROXY "";
	
		# Change this accordingly to your PHP installation
		fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
		fastcgi_index index.php;

		# SCRIPT_FILENAME parameter is used for PHP FPM determining the script name.
		# If this parameter is not set, PHP FPM responses 200 OK with empty content, and there is no error or warning
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

		# Include the fastcgi_param setting
		include fastcgi_params;
	}
	
	# ---------- OTHER OPTIONS ----------
	
	# Enforce clean URLs - Only enable this if you needed
	# Removes index.php from urls like www.example.com/index.php/my-page --> www.example.com/my-page
	# Could be done with 301 for permanent or other redirect codes.
	# if ($request_uri ~* "^(.*/)index\.php/(.*)") {
	#	return 301 $1$2;
	# }

}
