# config to don’t allow the browser to render the page inside an frame or iframe
# and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
# if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
# https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
add_header X-Frame-Options SAMEORIGIN;

# This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
# It’s usually enabled by default anyway, so the role of this header is to re-enable the filter for
# this particular website if it was disabled by the user.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
add_header X-XSS-Protection          "1; mode=block" always;


# When serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
# to disable content-type sniffing on some browsers.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
# Currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
# http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
# ‘soon’ on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
add_header X-Content-Type-Options    "nosniff" always;

# No-referrer-when-downgrade is a security policy that is used to protect websites from malicious attacks.
# It is a feature of the HTTP protocol that prevents the browser from sending the referrer header when the
# user navigates from a secure HTTPS page to an insecure HTTP page. This policy helps to protect the website
# from malicious attacks such as cross-site scripting and clickjacking. It also helps to protect the user's
# privacy by preventing the website from knowing which page the user came from.
add_header Referrer-Policy           "no-referrer-when-downgrade" always;

# CSP makes it possible for server administrators to reduce or eliminate the vectors by which XSS can occur
# by specifying the domains that the browser should consider to be valid sources of executable scripts.
# A CSP compatible browser will then only execute scripts loaded in source files received from those allowed
# domains, ignoring all other scripts (including inline scripts and event-handling HTML attributes). 
# https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
add_header Content-Security-Policy   "default-src 'self' http: https: ws: wss: data: blob: 'unsafe-inline'; frame-ancestors 'self';" always;

# The HTTP Strict-Transport-Security response header (often abbreviated as HSTS) informs browsers that
# the site should only be accessed using HTTPS, and that any future attempts to access it using HTTP should
# automatically be converted to HTTPS.
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
add_header Strict-Transport-Security "max-age=31536000" always;

# Block access to "hidden" files and directories whose names begin with a
# period, except "Well-Known URIs" (RFC 5785). This includes directories
# used by version control systems such as Subversion or Git to store control files.
location ~ /\.(?!well-known) {
        deny all;
        return 403;
}

# Protect some files and directories from prying eyes.
location ~* \.(engine|inc|install|make|module|profile|po|sh|.*sql|theme|twig|tpl(\.php)?|xtmpl|yml)(~|\.sw[op]|\.bak|\.orig|\.save)?$|^(\.(?!well-known).*|Entries.*|Repository|Root|Tag|Template|composer\.(json|lock)|web\.config)$|^#.*#$|\.php(~|\.sw[op]|\.bak|\.orig|\.save)$ {
        deny all;
        return 403;
}
